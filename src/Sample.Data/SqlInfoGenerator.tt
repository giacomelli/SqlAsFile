// <auto-generated/>
// Gerador para auxiliar na localização de arquivos SQL.
// Os códigos deste arquivo serão compilados.

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using SqlAsFile;
<#
var projectNamespace = "Sample.Data";

void Generate(string dir)
{
	var sqlFiles = Directory.GetFiles(dir, "*.sql", SearchOption.AllDirectories);
	var directories = Directory.GetDirectories(dir);
		
	if (sqlFiles.Any(x => x.Contains(dir)))
	{
		var ns = Path.GetFileName(dir);

		if(ns != "Queries")
		{
			#>
			namespace <#=ns#>
			{
			<#
		}
		foreach(var d in directories)
		{
			Generate(d);  
		}
		
		var files = Directory.GetFiles(dir, "*.sql", SearchOption.TopDirectoryOnly);

		if (files.Length > 0)
		{
		#>
		public static class Sql
		{
			<#
			foreach(var f in files)
			{
				var className = Path.GetFileNameWithoutExtension(f);
				var filename = f.Substring(f.IndexOf(projectNamespace) + projectNamespace.Length + 1);
				filename = filename.Replace("\\", "/");
		
			#>
				private static readonly Lazy<FileSqlInfo> _<#=className#> = new Lazy<FileSqlInfo>(() => new FileSqlInfo("<#=filename#>")); 

				/// <summary>
				/// Informações do comando SQL existente no arquivo <#=filename#>.
				/// </summary>
				public static FileSqlInfo <#=className#> => _<#=className#>.Value;
				
			<#	
			} 
		#>		
		}
		<#
		}
		if(ns != "Queries")
		{
			#>		
			}
			<#
		}
	}
}

var root = Path.GetFullPath(Host.ResolvePath("."));
Generate(root);

#>